#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright (C) 2015 Canonical Ltd.
# Author: Christopher Townsend <christopher.townsend@canonical.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import libertine.utils
import psutil
import shlex
from libertine import LibertineContainer


def set_dbus_session_socket_path():
    unique_id = os.environ['DISPLAY'].strip(':')

    if not os.path.exists(libertine.utils.get_libertine_runtime_dir()):
        os.makedirs(libertine.utils.get_libertine_runtime_dir())

    dbus_session_socket_path = (
        os.path.join(libertine.utils.get_libertine_runtime_dir(), 'host_dbus_session' + unique_id))

    os.environ['DBUS_SESSION_BUS_ADDRESS'] = "unix:path=" + dbus_session_socket_path

    return dbus_session_socket_path


def launch_libertine_session_bridge():
    libertine_session_bridge_cmd = "libertine-session-bridge " + set_dbus_session_socket_path()

    args = shlex.split(libertine_session_bridge_cmd)
    return psutil.Popen(args)


if __name__ == '__main__':
    arg_parser = argparse.ArgumentParser(description='launch an application in a Libertine container')
    arg_parser.add_argument('container_id',
                            help='Libertine container ID')
    arg_parser.add_argument('app_exec_line', nargs=argparse.REMAINDER,
                            help='exec line')
    args = arg_parser.parse_args()

    session_bridge = launch_libertine_session_bridge()

    container = LibertineContainer(args.container_id,
                                   libertine.utils.get_libertine_container_type(args.container_id)) 
    container.launch_application(args.app_exec_line)

    session_bridge.terminate()
