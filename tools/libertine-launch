#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright (C) 2015 Canonical Ltd.
# Author: Christopher Townsend <christopher.townsend@canonical.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import json
import lxc
import psutil
import shlex
import signal
import xdg.BaseDirectory as basedir

from subprocess import DEVNULL

home_path = os.environ['HOME']

libertine_json_file_path = os.path.join(basedir.xdg_data_home, 'libertine', 'ContainersConfig.json')
libertine_container_path = basedir.save_cache_path('libertine-container')
libertine_userdata_path = os.path.join(basedir.xdg_data_home, 'libertine-container', 'user-data')


def get_container_type(container_id):
    container_type = ''

    with open(libertine_json_file_path) as fd:
        container_list = json.load(fd)
        fd.close()

    for container in container_list["containerList"]:
        if container["id"] == container_id:
            return container["type"]

    return ""


def get_container_path(container_id):
    return os.path.join(libertine_container_path, container_id, "rootfs")


def get_userdata_path(container_id):
    return os.path.join(libertine_userdata_path, container_id)


def set_dbus_session_socket_path():
    unique_id = os.environ['DISPLAY'].strip(':')

    dbus_session_socket_path = (
        os.path.join(basedir.get_runtime_dir(), 'host_dbus_session' + unique_id))

    os.environ['DBUS_SESSION_BUS_ADDRESS'] = "unix:path=" + dbus_session_socket_path

    return dbus_session_socket_path


def lxc_setup_pulse():
    pulse_socket_path = os.path.join(basedir.get_runtime_dir(), '.pulse_socket')

    lsof_cmd = 'lsof -n %s' % pulse_socket_path
    args = shlex.split(lsof_cmd)
    lsof = psutil.Popen(args, stderr=DEVNULL, stdout=DEVNULL)
    lsof.wait()

    if not os.path.exists(pulse_socket_path) or lsof.returncode == 1:
        pactl_cmd = (
            'pactl load-module module-native-protocol-unix auth-anonymous=1 socket=%s'
            % pulse_socket_path)
        args = shlex.split(pactl_cmd)
        psutil.Popen(args).wait()

    os.environ['PULSE_SERVER'] = pulse_socket_path


def launch_libertine_session_bridge():
    libertine_session_bridge_cmd = "libertine-session-bridge " + set_dbus_session_socket_path()

    args = shlex.split(libertine_session_bridge_cmd)
    return psutil.Popen(args)


def build_proot_command(container_id):
    proot_cmd = '/usr/bin/proot'
    if not os.path.isfile(proot_cmd) or not os.access(proot_cmd, os.X_OK):
        raise RuntimeError('executable proot not found')
    proot_cmd += " -R " + get_container_path(container_id)

    # Bind-mount the host's locale(s)
    proot_cmd += " -b /usr/lib/locale"

    # Bind-mount extrausers on the phone
    if os.path.exists("/var/lib/extrausers"):
        proot_cmd += " -b /var/lib/extrausers"

    # Bind-mount common XDG direcotries
    bind_mounts = " -b %s:%s" % (get_userdata_path(container_id), home_path)

    xdg_user_dirs = ['Documents', 'Music', 'Pictures', 'Videos']
    for user_dir in xdg_user_dirs:
        user_dir_path = os.path.join(home_path, user_dir)
        bind_mounts += " -b %s:%s" % (user_dir_path, user_dir_path)

    proot_cmd += bind_mounts
    return proot_cmd


def launch_lxc_application(container_id, app_exec_line):
    container = lxc.Container(container_id, libertine_container_path)

    if not container.running:
        if not container.start():
            print("Container failed to start")
            return
        if not container.wait("RUNNING", 10):
            print("Container failed to enter the RUNNING state")
            return

    if not container.get_ips(timeout=30):
        print("Not able to connect to the network.")
        return

    compiz = container.attach(lxc.attach_run_command, "compiz")

    # Setup pulse to work inside the container
    lxc_setup_pulse()

    container.attach_wait(lxc.attach_run_command, app_exec_line)

    os.kill(compiz, signal.SIGTERM)


def launch_chroot_application(container_id, app_exec_line):
    proot_cmd = build_proot_command(container_id)

    args = shlex.split(proot_cmd)
    args.extend(['compiz'])
    compiz = psutil.Popen(args)

    args = shlex.split(proot_cmd)
    args.extend(app_exec_line)
    psutil.Popen(args).wait()

    for child in compiz.children():
        child.terminate()


if __name__ == '__main__':
    arg_parser = argparse.ArgumentParser(description='launch an application in a Libertine container')
    arg_parser.add_argument('container_id',
                            help='Libertine container ID')
    arg_parser.add_argument('app_exec_line', nargs=argparse.REMAINDER,
                            help='exec line')
    args = arg_parser.parse_args()

    container_type = get_container_type(args.container_id)

    session_bridge = launch_libertine_session_bridge()

    if container_type == "lxc":
        launch_lxc_application(args.container_id, args.app_exec_line)
    elif container_type == "chroot":
        launch_chroot_application(args.container_id, args.app_exec_line)

    session_bridge.terminate()
