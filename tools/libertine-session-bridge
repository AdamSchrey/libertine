#!/usr/bin/python3

import dbus 
import libertine.utils
import os
import select
import signal
import sys

from socket import *


def accept_new_connection(host_adder, container_sock):
    newconn = container_sock.accept()[0]
    descriptors.append(newconn)

    host_sock = socket(AF_UNIX, SOCK_STREAM)
    host_sock.connect(host_adder)
    descriptors.append(host_sock)

    socket_pairs.append([newconn, host_sock])


def get_socket_pair(socket):
    for i in range(len(socket_pairs)):
        if socket in socket_pairs[i]:
            return socket_pairs[i]


def get_socket_partner(socket):
    socket_pair = get_socket_pair(socket)

    for i in range(len(socket_pair)):
        if socket != socket_pair[i]:
            return socket_pair[i]


def close_connections(remove_socket):
    partner_socket = get_socket_partner(remove_socket)

    socket_pair = get_socket_pair(remove_socket)
    socket_pairs.remove(socket_pair)

    descriptors.remove(remove_socket)
    remove_socket.shutdown(SHUT_RDWR)
    remove_socket.close()

    descriptors.remove(partner_socket)
    partner_socket.shutdown(SHUT_RDWR)
    partner_socket.close()


def close_all_connections():
    for i, j in socket_pairs:
        i.shutdown(SHUT_RDWR)
        i.close()
        j.shutdown(SHUT_RDWR)
        j.close()


def get_host_maliit_socket():
    address_bus_name    = "org.maliit.server"
    address_object_path = "/org/maliit/server/address"
    address_interface   = "org.maliit.Server.Address"
    address_property    = "address"
    
    session_bus = dbus.SessionBus()
    maliit_object = session_bus.get_object('org.maliit.server', '/org/maliit/server/address')

    interface = dbus.Interface(maliit_object, dbus.PROPERTIES_IFACE)
    address = interface.Get('org.maliit.Server.Address', 'address')

    partition_key = 'unix:abstract='
    address = address.split(',')[0]
    address = address.partition(partition_key)[2]
    address = "\0%s" % address

    return address


def get_host_dbus_socket():
    socket_key = "DBUS_SESSION_BUS_ADDRESS=unix:abstract="

    with open(os.path.join(libertine.utils.get_user_runtime_dir(), 'dbus-session'), 'r') as fd:
        dbus_session_str = fd.read()

    fd.close()

    host_dbus_socket = dbus_session_str.partition(socket_key)[2]
    host_dbus_socket = host_dbus_socket.rstrip('\n')
    host_dbus_socket = "\0%s" % host_dbus_socket

    return host_dbus_socket


def socket_cleanup(signum, frame):
    for socket in descriptors:
        socket.close()

    close_all_connections()

    for socket_path in session_socket_paths:
        os.remove(socket_path)


def main_loop():
    signal.signal(signal.SIGTERM, socket_cleanup)
    signal.signal(signal.SIGINT, socket_cleanup)

    while 1:
        try:
            rlist, wlist, elist = select.select(descriptors, [], [])
        except InterruptedError:
            continue
        except:
            break

        for sock in rlist:
            if sock.fileno() == -1:
                continue

            if sock in host_session_socket_path_map:
                accept_new_connection(host_session_socket_path_map[sock], sock)

            else:
                data = sock.recv(4096)
                if len(data) == 0:
                    close_connections(sock)
                    continue

                send_sock = get_socket_partner(sock)

                if send_sock.fileno() < 0:
                    continue

                totalsent = 0
                while totalsent < len(data):
                    sent = send_sock.send(data)

                    if sent == 0:
                        close_connections(sock)
                        break
                    totalsent = totalsent + sent


def create_socket(session_socket_path):
    try:
        sock = socket(AF_UNIX, SOCK_STREAM)
    except:
        sock = None
    else:
        try:
            sock.bind(session_socket_path)
            sock.listen(5)
        except:
            sock.close()
            sock = None
        else:
            return sock

    return None
    

def create_container_socket(session_socket_path, get_host_session_path_function):
    container_session_sock = create_socket(session_socket_path)

    if container_session_sock is not None:
        try:
            host_session_path = get_host_session_path_function()
        except:
            container_session_sock.close()
            container_session_sock = None
            os.remove(session_socket_path)
            raise
        else:
            host_session_socket_path_map.update({container_session_sock:host_session_path})

            session_socket_paths.append(session_socket_path)
            descriptors.append(container_session_sock)


descriptors = []
host_session_socket_path_map = {}
session_socket_paths = []

# Required sockets:
create_container_socket(sys.argv[1], get_host_dbus_socket)

# Optional sockets:
try:
    create_container_socket(sys.argv[2], get_host_maliit_socket)
except:
    pass

socket_pairs = []

main_loop()
