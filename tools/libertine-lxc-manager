#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright (C) 2016-2017 Canonical Ltd.
# Author: Christopher Townsend <christopher.townsend@canonical.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import libertine.LxcContainer
import libertine.utils
import os
import shlex
import subprocess

from libertine.ContainersConfig import ContainersConfig
from libertine.lifecycle import *


LIBERTINE_LXC_MANAGER_NAME = libertine.LxcContainer.get_lxc_manager_dbus_name()
LIBERTINE_LXC_MANAGER_PATH = libertine.LxcContainer.get_lxc_manager_dbus_path()


class Service(ContainerLifecycleService):

    def __init__(self):
        super().__init__(LIBERTINE_LXC_MANAGER_NAME, LIBERTINE_LXC_MANAGER_PATH)
        self._home = os.environ['HOME']
        self._containers_config = ContainersConfig()
        self._is_pulse_setup = False

    def start(self, container_id):
        container = libertine.LxcContainer.lxc_container(container_id)

        if not container.defined:
            return LifecycleResult("Container {} is not valid".format(container_id))

        if not self._is_pulse_setup:
            self._setup_pulse()

        if container.state == 'STOPPED':
            self._dynamic_bind_mounts(container, container_id)

        libertine.LxcContainer.lxc_start(container)

        return LifecycleResult()

    def stop(self, container_id, options={}):
        container = libertine.LxcContainer.lxc_container(container_id)
        
        libertine.LxcContainer.lxc_stop(container, options.get('freeze', False))

        return LifecycleResult() # no error case

    def _setup_pulse(self):
        pulse_socket_path = os.path.join(libertine.utils.get_libertine_runtime_dir(), 'pulse_socket')

        lsof_cmd = 'lsof -n %s' % pulse_socket_path
        args = shlex.split(lsof_cmd)
        lsof = subprocess.Popen(args, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
        lsof.wait()

        if not os.path.exists(pulse_socket_path) or lsof.returncode == 1:
            pactl_cmd = (
                'pactl load-module module-native-protocol-unix auth-anonymous=1 socket=%s'
                % pulse_socket_path)
            args = shlex.split(pactl_cmd)
            subprocess.Popen(args).wait()

        self.is_pulse_setup = True

    def _dynamic_bind_mounts(self, container, container_id):
        self._containers_config.refresh_database()
        mounts = self._sanitize_bind_mounts(libertine.utils.get_common_xdg_user_directories() + \
                                            self._containers_config.get_container_bind_mounts(container_id))

        data_dir = libertine.utils.get_libertine_container_userdata_dir_path(container_id)
        for user_dir in libertine.utils.generate_binding_directories(mounts, self._home):
            if os.path.isabs(user_dir[1]):
                path = user_dir[1].strip('/')
                fullpath = os.path.join(libertine.utils.get_libertine_container_rootfs_path(container_id), path)
            else:
                path = "{}/{}".format(self._home.strip('/'), user_dir[1])
                fullpath = os.path.join(data_dir, user_dir[1])

            os.makedirs(fullpath, exist_ok=True)

            libertine.utils.get_logger().debug("Mounting {}:{} in container {}".format(user_dir[0], path, container_id))
            xdg_user_dir_entry = (
                "%s %s none bind,create=dir,optional"
                % (user_dir[0], path)
            )
            container.append_config_item("lxc.mount.entry", xdg_user_dir_entry)

    def _sanitize_bind_mounts(self, mounts):
        return [mount.replace(" ", "\\040") for mount in mounts]


if __name__ == '__main__':
    ContainerLifecycleServiceRunner(Service()).run()
